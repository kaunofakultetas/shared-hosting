import sys
import csv
import os
import json
import re
from subprocess import Popen, PIPE



class CaddyfileUpdater:
    '''
    Class to update the Caddyfile configuration from a list of DNS entries.
    '''


    # Global options block
    global_options = '''
    ########################################################################################################################
    ##############      This configuration file is automatically generated by the hosting-control-docker      ##############
    ##############  Any changes to this file will be lost when the system initiates a configuration reload.   ##############
    ########################################################################################################################

    {
        # Global options block
        log {
            output file /var/log/caddy/access.log {
                roll_size 100mb
                roll_keep 5
                roll_keep_for 720h
            }
            format json
        }
    }
    '''
    global_options = re.sub(r'^ {4}', '', global_options, flags=re.MULTILINE)


    # Cloudflare snippet (shared configuration)
    cloudflare_snippet = '''
    # Saltinis: https://www.cloudflare.com/ips/
    (cloudflare) {
        remote_ip 103.21.244.0/22
        remote_ip 103.22.200.0/22
        remote_ip 103.31.4.0/22
        remote_ip 104.16.0.0/13
        remote_ip 104.24.0.0/14
        remote_ip 108.162.192.0/18
        remote_ip 131.0.72.0/22
        remote_ip 141.101.64.0/18
        remote_ip 162.158.0.0/15
        remote_ip 172.64.0.0/13
        remote_ip 173.245.48.0/20
        remote_ip 188.114.96.0/20
        remote_ip 190.93.240.0/20
        remote_ip 197.234.240.0/22
        remote_ip 198.41.128.0/17
    }
    '''
    cloudflare_snippet = re.sub(r'^ {4}', '', cloudflare_snippet, flags=re.MULTILINE)


    # Configuration to block nonâ€‘Cloudflare requests if needed.
    cloudflare_block = '''
        # Block Non cloudflare requests
        @block_non_cloudflare {
            not {
                import cloudflare
            }
        }
        respond @block_non_cloudflare "Sorry for disapointing you, but this service is only accessible through Cloudflare" 403
    '''



    def generate_caddyfile(self, dns_entries):
        '''
        Function to generate a Caddyfile content from a list of DNS entries.
        dns_entries: list of dictionaries, each containing the following keys:
            - ID: int
            - VirtualServerID: int
            - DomainName: str
            - IsCloudflare: int (0 or 1)
        '''
        
        # Start building the Caddyfile content.
        caddyfile_content = ""
        caddyfile_content += self.global_options + "\n\n"
        caddyfile_content += self.cloudflare_snippet + "\n\n"
        caddyfile_content += "\n"

        # Iterate over all DNS entries.
        for dns_entry in dns_entries:
            # Extract values from CSV.
            dns_id = dns_entry["id"]
            virtual_server_id = dns_entry["virtualserverid"]
            domain_name = dns_entry["domainname"]
            is_cloudflare = dns_entry["iscloudflare"]
            is_ssl = dns_entry["ssl"]


            # Begin the server block.
            server_block = f"# DNS ID: {dns_id}\n"
            if is_ssl == 1:
                server_block += f"{domain_name} {{\n"
            else:
                server_block += f"http://{domain_name} {{\n"


            # HTTPS configuration
            if is_cloudflare == 1:
                server_block += "    tls internal"
            else:
                if is_ssl == 1:
                    server_block += "    tls admin@knf.vu.lt"
            server_block += "\n\n"


            # If the server should only be accessible through Cloudflare, add the block.
            if is_cloudflare == 1:
                server_block += self.cloudflare_block
                server_block += "\n\n"


            # Add the reverse proxy configuration.
            if is_cloudflare == 1:
                server_block += f"    reverse_proxy http://hosting-users-dind-{virtual_server_id}:80 {{\n"
                server_block += "        header_up X-Forwarded-For {http.request.header.X-Forwarded-For}\n"
                server_block += "    }\n"
                server_block += "}"
            else:
                server_block += f"    reverse_proxy http://hosting-users-dind-{virtual_server_id}:80 {{\n"
                server_block += "        header_up X-Forwarded-For {remote_host}\n"
                server_block += "    }\n"
                server_block += "}"
            server_block += "\n\n\n\n"

            # Add the server block to the caddyfile content.
            caddyfile_content += server_block

        return caddyfile_content



    def save_caddyfile(self, caddyfile_content):
        caddy_location = os.environ.get("CADDYFILE_LOCATION", '/users-caddy/Caddyfile')
        with open(caddy_location, "w") as file:
            file.write(caddyfile_content)
        


    def reload_caddy(self):
        process = Popen([
            'docker', 'exec', 'hosting-users-caddy', 'caddy', 'reload', '--config', '/etc/caddy/Caddyfile'
        ])
        output, error = process.communicate()

        if process.returncode != 0:
            return json.dumps({'message': f'Failed to reload Caddy'})
            
        return json.dumps({'message': f'Caddy reloaded successfully'})





